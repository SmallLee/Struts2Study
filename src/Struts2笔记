1.通配符*只能使用两种方法
a:*.后缀名
b:以/开头，已/*结尾  /action/*

2.使用Filter作为控制器的好处
    可以方便的在应用程序里对所有资源(包括静态资源)进行控制访问
3.在使用jsp:useBean时，系统会默认调用JavaBean的无参构造函数
<jsp:useBean id="product" class="pojo.Product" scope="request"/>等同于下面的代码
Product product = new Product();//id代表类创建的实例对象
request.setAttribute("product",product)

4.ERROR StatusLogger No log4j2 configuration file found是因为log4j2的配置文件没有导入，放入src下就可以了

5.Cannot resolve Struts Package
http://blog.csdn.net/small_lee/article/details/78621909
6.为了安全，WEB-INF  下面的jsp 是不能直接访问的，也就是说不能重定向到WEB-INF目录下的页面

7.搭建Struts2开发环境
    a：加入jar包
    b:在web.xml中配置过滤器
    c:在类目录下假如Struts2的配置文件struts.xml

8.action 和Action类
    action：代表一个struts2的请求
    Action类：能够处理Struts2请求的类
        属性的名字必须和JavaBean的命名规则相同
        属性的类型可以是任意类型，从字符串到非字符串之间的转化可以自动进行
        必须有一个不带参数的构造函数(在配置文件中要通过反射调用)
        至少有一个供struts2在执行这个action时调用的方法
        同一个Action类可以包含多个action方法
        Structs2会为每一个HTTP请求创建一个Action实例
9.如何访问WEB资源
    与ServletAPI解耦的方式：只能访问有限的ServletAPI,且只能访问其有限的方法
        >使用ActionContexxt
        >实现xxxaWare接口
        >若一个Action类中有多个action方法，且多个方法都需要使用域对象的map或者parameters，则建议
        使用实现Aware接口的方法
    与ServletAPI耦合的方式，可以访问更多的方法
        >使用ServletActionContext
        >实现ServletxxxAware方法

10.Action类的setter方法要和请求参数的name对应
11.配置action时，如果不指定class属性，默认的Action类是com.opensymphony.xwork2.ActionSupport,
执行的方法是execute

12.在手工完成字段验证，显示错误信息，国际化等情况下，推荐继承ActionSupport

13.result是action的子节点，result代表action执行后可能去的目的地，一个action节点可以配置多个子节点
result的name属性对应着action方法有可能的一个返回值,success,error,login,input

14.result还有一个type属性，表示结果的响应类型，默认是dispatcher
    >dispatcher
    >redirect
    >redirectAction:重定向到一个Action
    >chain:转发到一个Action

    通过redirect的功能也能实现重定向到一个Action的功能
    不能通过type=dispatcher的方式转发到一个Action

15.通配符映射匹配规则
    a:若找到多个匹配，没有通配符的那个胜出
    b:若指定的动作不存在，Struts2会尝试把这个URI与任何一个包含着*的动作进行匹配
    c:被匹配到的子串可以使用{1}{2}代替
    d:{0}匹配整个url
    e：若找到的通配符不止一个，则按照先后顺序
    f:*不能匹配/，若想匹配/,是哟哦那个**

  16.在ServletPath后面加上叹号，然后跟上方法名，表示要动态调用的方法

  17.OGNL(Object-Graph Navagation Language)
    ValueStack值栈
    可以从ActiionContext中获取值栈
    值栈分为两个逻辑部分：
        >Map栈：实际上是OgnlContext类型，是个map，也是对ActionContext的一个引用，里面保存着各种
        map，requestMap,sessionMap
        >对象栈：实际上是CompoundRoot类型，是一个使用ArrayList定义的栈，里面保存着和Action实例相关的对象
        在JSP页面上可以利用Ognl访问到值栈里的对象属性

   18.默认情况下，Action对象会自动的放到值栈的栈顶

   19.Struts2利用s:property标签和OGNL表达式来读取值栈中的属性值
    值栈中的内容
        >对于对象栈：对象栈中某一个对象的属性值
            object.propertyName
            object['propertyName']
            object["propertyName"]
        >对于Map栈:request,session,application的一个属性值或者一个请求参数的值
            <s:property value="#session.product.productName"/>
   20.使用el访问值栈中对象的属性
    <s:property value="fieldName"/>也可以使用el
    ${fieldName}

    原理：Struts2将HtppServletRequest包装为StrutsRequestWrapper,然后将这个对象
    传到页面上，而这个类重写了getAttribute方法，这个方法会自动的去值栈里获取属性值
    用el肯定能用ognl，反过来不行

    21.声明式异常处理
        声明式异常处理机制由ExceptionMappingInterceptor拦截器负责处理，当异常被捕获时，就会向ValueStack中放两个
        对象：
        exception
        exceptionStack

        值栈的类型是OgnlValueStack,值栈里面是root和context对象，root是CompoundRoot对象，存放对象
        context是OgnlContext对象，存放各种map

    22.Struts自动把Action对象放入到值栈中，

    23.url标签中的value属性会自动对OGNL解析，不希望解析的话，可以把value中的值加双引号

    24.s:set用来向page,session,request,application中加入一个属性值
        s:push 标签开始时把对象压入值栈，标签结束后弹出
       s:iterator
        遍历集合，把这个可遍历对象里的每一个元素一次压入和弹出
        s:date 可以对Date对象进行排版
    25.表单标签中表单的name属性值要和bean的属性值一致
        Struts2的form标签会生成一个table，以进行自动的排版
        可以对表单提交的值进行回显
        表单标签的action不用带后缀

    26.当包含着一个复选框的表单被提交时，如果某个复选框被选中，他的值将为true，这个复选框在
    http请求里增加一个参数，但如果复选框未被选中，则在请求中不会增加参数
    Struts2为了解决这个局限性，解决办法是为复选框创建一个不可见的匹配字段

    27.Struts主题
        指定Struts2主题的三种方式(默认主题是xhtml)
        局部标签属性配置，
        在域对象里设置属性
        在全局struts.xml文件中配置
        <constant name="struts.ui.theme" value="simple"/>
    28.ArrayList的构造函数可以接收一个Collection集合

    29.result中的type="redirectAction" 可以重定向到struts.xml中配置的其他action
    LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的。

    30.Struts2运行流程
        ActionProxy是Action的一个代理类，也就是说Action的调用是通过ActionProxy实现的，其实就是调用了
        ActionProxy的execute方法，而该方法又调用了ActionInvocation的invoke方法
        ActionInvocation就是Action的调用者，在Action的执行过程中，负责interceptor,Action,result等一系列元素的
        调度
    31.从2.5开始，Struts2默认只能定义这些方法名
     <global-allowed-methods>execute,input,back,cancel,browse,save,delete,list,index</global-allowed-methods>
     如果我们需要自定义方法名，需要按照下面的步骤
     1.修改DOCTYPE定义，都改为2.5
     <!DOCTYPE struts PUBLIC
             "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
             "http://struts.apache.org/dtds/struts-2.5.dtd">
     2.配置允许使用的方法名，有两种配置方法，全局和局部配置
     全局配置,在package之间配置
     <global-allowed-methods>regex:.*</global-allowed-methods>
     局部配置
         <allowed-methods>add</allowed-methods>
         注意：元素的配置要遵循下面的顺序param|result|interceptor-ref|exception-mapping，否则会抛出异常

        元素类型为 "action" 的内容必须匹配 "((param|result|interceptor-ref|exception-mapping)*,allowed-methods?)

     32.实现ModelDriven接口后的执行流程，
     1)
            public String intercept(ActionInvocation invocation) throws Exception {
                    Object action = invocation.getAction();
                    if (action instanceof ModelDriven) {
                        ModelDriven modelDriven = (ModelDriven)action;
                        ValueStack stack = invocation.getStack();
                        //把getModel方法返回的对象放入到值栈，其实就是EmployeeAction中的Employee成员变量
                        Object model = modelDriven.getModel();
                        if (model != null) {
                            stack.push(model);
                        }

                        if (this.refreshModelBeforeResult) {
                            invocation.addPreResultListener(new ModelDrivenInterceptor.RefreshModelBeforeResult(modelDriven, model));
                        }
                    }

                    return invocation.invoke();
                }
       2)执行ParametersInterceptor的doIntercept方法，把请求参数的值赋值给栈顶对象的属性，若栈顶对象没有对应的属性
       则查询下一个对象的属性
  33.ParametersIntercept方法会把请求参数赋值给栈顶对象的属性
